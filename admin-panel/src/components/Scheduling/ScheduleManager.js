import React, { useState } from 'react';
import { useQuery, useMutation, useQueryClient } from '@tanstack/react-query';
import {
  Box,
  Card,
  CardContent,
  Typography,
  Button,
  Grid,
  Chip,
  List,
  ListItem,
  ListItemText,
  ListItemAvatar,
  Avatar,
  Divider,
  Dialog,
  DialogTitle,
  DialogContent,
  DialogActions,
  TextField,
  FormControl,
  InputLabel,
  Select,
  MenuItem,
  Switch,
  FormControlLabel,
  Alert,
  LinearProgress,
} from '@mui/material';
import { DateTimePicker } from '@mui/x-date-pickers/DateTimePicker';
import {
  Schedule,
  AutoAwesome,
  Add,
  Edit,
  Delete,
  CheckCircle,
  Cancel,
} from '@mui/icons-material';
import { schedulingAPI } from '../../services/api';
import dayjs from 'dayjs';

const ScheduleManager = () => {
  const queryClient = useQueryClient();
  const [scheduleDialog, setScheduleDialog] = useState(false);
  const [autoScheduleDialog, setAutoScheduleDialog] = useState(false);
  const [scheduleData, setScheduleData] = useState({
    title: '',
    type: 'tournament',
    scheduledAt: dayjs(),
    duration: 120,
    maxParticipants: 100,
    autoFill: false,
  });

  const { data: scheduledEvents = [], isLoading } = useQuery({
    queryKey: ['scheduled-events'],
    queryFn: schedulingAPI.getScheduled,
    refetchInterval: 30000,
  });

  const createScheduleMutation = useMutation({
    mutationFn: schedulingAPI.createSchedule,
    onSuccess: () => {
      queryClient.invalidateQueries(['scheduled-events']);
      setScheduleDialog(false);
      setScheduleData({
        title: '',
        type: 'tournament',
        scheduledAt: dayjs(),
        duration: 120,
        maxParticipants: 100,
        autoFill: false,
      });
    },
  });

  const autoScheduleMutation = useMutation({
    mutationFn: schedulingAPI.autoSchedule,
    onSuccess: () => {
      queryClient.invalidateQueries(['scheduled-events']);
      setAutoScheduleDialog(false);
    },
  });

  const handleSubmit = async () => {
    await createScheduleMutation.mutateAsync({
      ...scheduleData,
      scheduledAt: scheduleData.scheduledAt.toISOString(),
    });
  };

  const handleAutoSchedule = async (rules) => {
    await autoScheduleMutation.mutateAsync(rules);
  };

  const getStatusColor = (status) => {
    switch (status) {
      case 'scheduled': return 'info';
      case 'active': return 'success';
      case 'completed': return 'default';
      case 'cancelled': return 'error';
      default: return 'default';
    }
  };

  const getTypeIcon = (type) => {
    switch (type) {
      case 'tournament': return <Schedule />;
      case 'maintenance': return <Cancel />;
      default: return <Schedule />;
    }
  };

  // Mock data for demonstration
  const mockScheduledEvents = [
    {
      id: 1,
      title: 'Weekend Tournament Series',
      type: 'tournament',
      scheduledAt: new Date(Date.now() + 24 * 60 * 60 * 1000),
      duration: 180,
      maxParticipants: 100,
      currentParticipants: 45,
      status: 'scheduled',
      autoGenerated: false,
    },
    {
      id: 2,
      title: 'System Maintenance',
      type: 'maintenance',
      scheduledAt: new Date(Date.now() + 2 * 24 * 60 * 60 * 1000),
      duration: 60,
      status: 'scheduled',
      autoGenerated: true,
    },
    {
      id: 3,
      title: 'Daily Quick Matches',
      type: 'tournament',
      scheduledAt: new Date(Date.now() + 6 * 60 * 60 * 1000),
      duration: 90,
      maxParticipants: 50,
      currentParticipants: 32,
      status: 'scheduled',
      autoGenerated: true,
    },
  ];

  const data = scheduledEvents.length > 0 ? scheduledEvents : mockScheduledEvents;

  return (
    <Box>
      <Box sx={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center', mb: 4 }}>
        <Typography variant="h4" component="h1" sx={{ fontWeight: 700 }}>
          Tournament Scheduling
        </Typography>
        <Box sx={{ display: 'flex', gap: 2 }}>
          <Button
            variant="outlined"
            startIcon={<AutoAwesome />}
            onClick={() => setAutoScheduleDialog(true)}
          >
            Auto Schedule
          </Button>
          <Button
            variant="contained"
            startIcon={<Add />}
            onClick={() => setScheduleDialog(true)}
          >
            Create Schedule
          </Button>
        </Box>
      </Box>

      {/* Summary Cards */}
      <Grid container spacing={3} sx={{ mb: 4 }}>
        <Grid item xs={12} sm={6} md={3}>
          <Card>
            <CardContent>
              <Box sx={{ display: 'flex', alignItems: 'center', gap: 2 }}>
                <Avatar sx={{ bgcolor: 'info.main' }}>
                  <Schedule />
                </Avatar>
                <Box>
                  <Typography variant="h4" sx={{ fontWeight: 700 }}>
                    {data.filter(e => e.status === 'scheduled').length}
                  </Typography>
                  <Typography variant="body2" color="text.secondary">
                    Scheduled Events
                  </Typography>
                </Box>
              </Box>
            </CardContent>
          </Card>
        </Grid>
        <Grid item xs={12} sm={6} md={3}>
          <Card>
            <CardContent>
              <Box sx={{ display: 'flex', alignItems: 'center', gap: 2 }}>
                <Avatar sx={{ bgcolor: 'success.main' }}>
                  <CheckCircle />
                </Avatar>
                <Box>
                  <Typography variant="h4" sx={{ fontWeight: 700 }}>
                    {data.filter(e => e.status === 'active').length}
                  </Typography>
                  <Typography variant="body2" color="text.secondary">
                    Active Events
                  </Typography>
                </Box>
              </Box>
            </CardContent>
          </Card>
        </Grid>
        <Grid item xs={12} sm={6} md={3}>
          <Card>
            <CardContent>
              <Box sx={{ display: 'flex', alignItems: 'center', gap: 2 }}>
                <Avatar sx={{ bgcolor: 'warning.main' }}>
                  <AutoAwesome />
                </Avatar>
                <Box>
                  <Typography variant="h4" sx={{ fontWeight: 700 }}>
                    {data.filter(e => e.autoGenerated).length}
                  </Typography>
                  <Typography variant="body2" color="text.secondary">
                    Auto Generated
                  </Typography>
                </Box>
              </Box>
            </CardContent>
          </Card>
        </Grid>
        <Grid item xs={12} sm={6} md={3}>
          <Card>
            <CardContent>
              <Box sx={{ display: 'flex', alignItems: 'center', gap: 2 }}>
                <Avatar sx={{ bgcolor: 'primary.main' }}>
                  <Schedule />
                </Avatar>
                <Box>
                  <Typography variant="h4" sx={{ fontWeight: 700 }}>
                    {data.length}
                  </Typography>
                  <Typography variant="body2" color="text.secondary">
                    Total Events
                  </Typography>
                </Box>
              </Box>
            </CardContent>
          </Card>
        </Grid>
      </Grid>

      {/* Scheduled Events List */}
      <Card>
        <CardContent>
          <Typography variant="h6" sx={{ mb: 3 }}>
            Scheduled Events
          </Typography>
          {isLoading ? (
            <LinearProgress />
          ) : (
            <List>
              {data.map((event, index) => (
                <React.Fragment key={event.id}>
                  <ListItem alignItems="flex-start">
                    <ListItemAvatar>
                      <Avatar sx={{ bgcolor: getStatusColor(event.status) }}>
                        {getTypeIcon(event.type)}
                      </Avatar>
                    </ListItemAvatar>
                    <ListItemText
                      primary={
                        <Box sx={{ display: 'flex', alignItems: 'center', gap: 1, mb: 1 }}>
                          <Typography variant="subtitle1" sx={{ fontWeight: 600 }}>
                            {event.title}
                          </Typography>
                          <Chip
                            label={event.status}
                            color={getStatusColor(event.status)}
                            size="small"
                            sx={{ textTransform: 'capitalize' }}
                          />
                          {event.autoGenerated && (
                            <Chip
                              label="Auto"
                              size="small"
                              color="warning"
                              icon={<AutoAwesome />}
                            />
                          )}
                        </Box>
                      }
                      secondary={
                        <Box>
                          <Typography variant="body2" sx={{ mb: 1 }}>
                            {dayjs(event.scheduledAt).format('MMM DD, YYYY HH:mm')} â€¢ {event.duration} minutes
                          </Typography>
                          {event.maxParticipants && (
                            <Typography variant="body2" color="text.secondary">
                              Participants: {event.currentParticipants || 0}/{event.maxParticipants}
                            </Typography>
                          )}
                        </Box>
                      }
                    />
                    <Box sx={{ display: 'flex', gap: 1 }}>
                      <Button size="small" variant="outlined">
                        <Edit fontSize="small" />
                      </Button>
                      <Button size="small" variant="outlined" color="error">
                        <Delete fontSize="small" />
                      </Button>
                    </Box>
                  </ListItem>
                  {index < data.length - 1 && <Divider variant="inset" component="li" />}
                </React.Fragment>
              ))}
            </List>
          )}
        </CardContent>
      </Card>

      {/* Create Schedule Dialog */}
      <Dialog open={scheduleDialog} onClose={() => setScheduleDialog(false)} maxWidth="sm" fullWidth>
        <DialogTitle>Create Schedule</DialogTitle>
        <DialogContent>
          <Grid container spacing={2} sx={{ mt: 1 }}>
            <Grid item xs={12}>
              <TextField
                fullWidth
                label="Event Title"
                value={scheduleData.title}
                onChange={(e) => setScheduleData(prev => ({ ...prev, title: e.target.value }))}
                required
              />
            </Grid>
            <Grid item xs={12}>
              <FormControl fullWidth>
                <InputLabel>Event Type</InputLabel>
                <Select
                  value={scheduleData.type}
                  onChange={(e) => setScheduleData(prev => ({ ...prev, type: e.target.value }))}
                  label="Event Type"
                >
                  <MenuItem value="tournament">Tournament</MenuItem>
                  <MenuItem value="maintenance">Maintenance</MenuItem>
                </Select>
              </FormControl>
            </Grid>
            <Grid item xs={12}>
              <DateTimePicker
                label="Scheduled Date & Time"
                value={scheduleData.scheduledAt}
                onChange={(value) => setScheduleData(prev => ({ ...prev, scheduledAt: value }))}
                slotProps={{
                  textField: {
                    fullWidth: true,
                    required: true,
                  },
                }}
              />
            </Grid>
            <Grid item xs={12} md={6}>
              <TextField
                fullWidth
                label="Duration (minutes)"
                type="number"
                value={scheduleData.duration}
                onChange={(e) => setScheduleData(prev => ({ ...prev, duration: Number(e.target.value) }))}
                required
              />
            </Grid>
            {scheduleData.type === 'tournament' && (
              <Grid item xs={12} md={6}>
                <TextField
                  fullWidth
                  label="Max Participants"
                  type="number"
                  value={scheduleData.maxParticipants}
                  onChange={(e) => setScheduleData(prev => ({ ...prev, maxParticipants: Number(e.target.value) }))}
                  required
                />
              </Grid>
            )}
            <Grid item xs={12}>
              <FormControlLabel
                control={
                  <Switch
                    checked={scheduleData.autoFill}
                    onChange={(e) => setScheduleData(prev => ({ ...prev, autoFill: e.target.checked }))}
                  />
                }
                label="Auto-fill participants"
              />
            </Grid>
          </Grid>
        </DialogContent>
        <DialogActions>
          <Button onClick={() => setScheduleDialog(false)}>Cancel</Button>
          <Button
            onClick={handleSubmit}
            variant="contained"
            disabled={createScheduleMutation.isPending}
          >
            {createScheduleMutation.isPending ? 'Creating...' : 'Create Schedule'}
          </Button>
        </DialogActions>
      </Dialog>

      {/* Auto Schedule Dialog */}
      <Dialog open={autoScheduleDialog} onClose={() => setAutoScheduleDialog(false)} maxWidth="sm" fullWidth>
        <DialogTitle>Auto Schedule Configuration</DialogTitle>
        <DialogContent>
          <Typography variant="body2" sx={{ mb: 3 }}>
            Configure automatic tournament scheduling based on player activity and preferences.
          </Typography>
          <Grid container spacing={2}>
            <Grid item xs={12}>
              <FormControlLabel
                control={<Switch defaultChecked />}
                label="Enable auto-scheduling"
              />
            </Grid>
            <Grid item xs={12} md={6}>
              <TextField
                fullWidth
                label="Tournaments per day"
                type="number"
                defaultValue={3}
              />
            </Grid>
            <Grid item xs={12} md={6}>
              <TextField
                fullWidth
                label="Preferred time slots"
                defaultValue="18:00, 20:00, 22:00"
              />
            </Grid>
            <Grid item xs={12}>
              <FormControl fullWidth>
                <InputLabel>Tournament Types</InputLabel>
                <Select multiple defaultValue={['solo', 'duo', 'squad']} label="Tournament Types">
                  <MenuItem value="solo">Solo</MenuItem>
                  <MenuItem value="duo">Duo</MenuItem>
                  <MenuItem value="squad">Squad</MenuItem>
                </Select>
              </FormControl>
            </Grid>
          </Grid>
        </DialogContent>
        <DialogActions>
          <Button onClick={() => setAutoScheduleDialog(false)}>Cancel</Button>
          <Button
            onClick={() => handleAutoSchedule({ enabled: true })}
            variant="contained"
            disabled={autoScheduleMutation.isPending}
          >
            {autoScheduleMutation.isPending ? 'Configuring...' : 'Apply Configuration'}
          </Button>
        </DialogActions>
      </Dialog>
    </Box>
  );
};

export default ScheduleManager; 